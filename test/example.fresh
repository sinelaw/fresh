func save(x) {
    mem = 3;
}

union List<x> {
    Nil,
    Cons(head: x, tail: List<x>),
}

func id(x) {
    return x;
}

func getX(obj) {
    return obj.sub.x;
}

union Fruit {
    Apple,
    Pear,
}

union Option<x> {
    Value(value: x),
}


func test(x) {
    switch (x) {
    case Null: return Null;
    };
}

// (x -> x -> x) -> Option<x> -> Option<x> -> Option<x>
func combine(f, o1, o2) {
    switch (o1, o2) {
    case (Null      , Null      ): return Null;
    case (Value     , Null      ): return v;
    case (Null      , Value     ): return v;
    case (Value(v1) , Value(v2) ): return Value(f(v1, v2));
    };
}

union Tree<x> {
    Branch(left: Tree<x>, value: x, right: Tree<x>),
    Stump,
}


// Tree(Number) -> Option(Number)
func treeMax(t) {
    return switch (t) {
    case Stump         : Null;
    case Branch(l,v,r) : combine(max, v,
                                 combine(max, treeMax(l), treeMax(r)));
    };
}


// // Tree(x) -> Iterator(x)
// func treeIter(t) {
//     switch (t) {
//     case Stump      : return;
//     case b@Branch   : {
//         yieldmore treeIter(b.left);
//         yield b.value;
//         yieldmore treeIter(b.right);
//     }
//     };
// }

// (x -> y) -> Tree(x) -> Tree(y)
func treeMap(f, t) {
    switch (t) {
    case Stump     : return Stump;
    case b@Branch  : return Branch(treeMap(f, b.left),
                                   f(b.value),
                                   treeMap(f, b.right));
    };
}

// // Polymorphic variants:

// [ ERR_FILE_NOT_FOUND | a… ] -> [ a… ]
func handleFileErrors(e) {
    switch (e) {
    case ERR_FILE_NOT_FOUND: do_something;
    case ERR_PERMISSION_DENIED: do_something_else;
    case x: return x;
    };
}
